{"version":3,"sources":["store/converter/types.js","store/converter/convertReducer.js","store/dataTemplate/dataTemplateReducer.js","store/dataTemplate/types.js","store/rootReducer.js","store/store.js","components/sections/TopMenu/index.js","components/sections/TopMenu/TopMenu.js","store/converter/convertSelectors.js","store/dataTemplate/dataTemplateSelectors.js","helpers/index.js","store/converter/convertActions.js","containers/TopMenuContainer.js","components/template/index.js","components/template/Template.js","store/dataTemplate/dataTemplateActions.js","containers/TemplateContainer.js","pages/converter/SelectCurrency.js","pages/converter/index.js","pages/converter/Converter.js","containers/ConverterContainer.js","pages/currenciesList/Currency.js","pages/currenciesList/index.js","pages/currenciesList/CurrenciesList.js","containers/CurrenciesListContainer.js","pages/both/index.js","pages/both/Both.js","serviceWorker.js","index.js"],"names":["FETCH_CURRENCIES","convertReducer","store","currencyList","isError","isLoading","base","selections","action","type","data","selected","filter","elem","removed","combineReducers","converter","dataTemplate","dataTemplateReducer","initialState","JSON","parse","localStorage","getItem","createStore","rootReducer","applyMiddleware","thunk","next","setItem","stringify","getState","TopMenu","memo","fetchCurrency","useState","selectBase","setSelectBase","className","activeClassName","to","exact","value","onChange","target","map","currency","key","selectConverter","state","selectConverterIsLoading","selectConverterBase","selectConverterIsError","selectConverterCurrencyList","selectSelections","selectIsTemplateLoading","selectDataTemplate","selectCurrencyURL","resolvePath","filePath","prefix","process","concat","startsWith","setLoadCurrencies","setCurrenciesLoadError","setBaseCurrency","dispatch","currencyBase","currentState","URL","fetch","then","j","json","rates","Object","entries","reduce","obj","catch","finally","connect","keys","props","Template","children","fetchDataTemplate","isTemplateLoading","converterIsLoading","converterIsError","useEffect","onClick","setLoadDataTemplate","SelectCurrency","select","setSelect","Converter","converterBase","selectFrom","setSelectFrom","selectTo","setSelectTo","from","setFrom","setTo","readOnly","Currency","addToSelected","removeFromSelected","includes","checked","setChecked","hasMount","useRef","current","CurrenciesList","currenciesList","Both","Boolean","window","location","hostname","match","ReactDOM","render","path","component","ConverterContainer","CurrenciesListContainer","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f6f788e3.chunk.js","sourcesContent":["export const LOAD_CURRENCIES = \"LOAD_CURRENCIES\";\r\nexport const FETCH_CURRENCIES = \"FETCH_CURRENCIES\";\r\nexport const SET_CURRENCIES_LOAD_ERROR = \"SET_CURRENCIES_LOAD_ERROR\";\r\nexport const SET_BASE_CURRENCY = \"SET_BASE_CURRENCY\";\r\nexport const ADD_SELECTED_CURRENCY = \"ADD_SELECTED_CURRENCY\";\r\nexport const REMOVE_SELECTED_CURRENCY = \"REMOVE_SELECTED_CURRENCY\";","import {\r\n  LOAD_CURRENCIES,\r\n  FETCH_CURRENCIES,\r\n  SET_CURRENCIES_LOAD_ERROR,\r\n  SET_BASE_CURRENCY,\r\n  ADD_SELECTED_CURRENCY,\r\n  REMOVE_SELECTED_CURRENCY\r\n} from \"./types\";\r\n\r\nconst convertReducer = (\r\n  store = {\r\n    currencyList: [],\r\n    isError: false,\r\n    isLoading: false,\r\n    base: \"USD\",\r\n    selections: []\r\n  },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case FETCH_CURRENCIES:\r\n      return {\r\n        ...store,\r\n        currencyList: action.data\r\n      };\r\n\r\n    case LOAD_CURRENCIES:\r\n      return { ...store, isLoading: action.isLoading };\r\n\r\n    case SET_CURRENCIES_LOAD_ERROR:\r\n      return { ...store, isError: action.isError };\r\n\r\n    case SET_BASE_CURRENCY:\r\n      return { ...store, base: action.base };\r\n\r\n    case ADD_SELECTED_CURRENCY:\r\n      return { ...store, selections: [...store.selections, action.selected] };\r\n\r\n    case REMOVE_SELECTED_CURRENCY:\r\n      return {\r\n        ...store,\r\n        selections: store.selections.filter(elem => elem !== action.removed)\r\n      };\r\n\r\n    default:\r\n      return store;\r\n  }\r\n};\r\n\r\nexport default convertReducer;\r\n","import { LOAD_DATA_TEMPLATE, FETCH_DATA_TEMPLATE } from \"./types\";\r\n\r\nconst convertReducer = (store = { isLoading: false }, action) => {\r\n  switch (action.type) {\r\n    case FETCH_DATA_TEMPLATE:\r\n      return {\r\n        ...store,\r\n        data: action.data\r\n      };\r\n\r\n    case LOAD_DATA_TEMPLATE:\r\n      return { ...store, isLoading: action.isLoading };\r\n\r\n    default:\r\n      return store;\r\n  }\r\n};\r\n\r\nexport default convertReducer;\r\n","export const LOAD_DATA_TEMPLATE = \"LOAD_DATA_TEMPLATE\";\r\nexport const FETCH_DATA_TEMPLATE = \"FETCH_DATA_TEMPLATE\";\r\n","import { combineReducers } from 'redux';\r\n\r\nimport convertReducer from './converter/convertReducer';\r\nimport dataTemplateReducer from './dataTemplate/dataTemplateReducer';\r\n\r\nexport default combineReducers({\r\n  converter: convertReducer,\r\n  dataTemplate: dataTemplateReducer\r\n});\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport rootReducer from './rootReducer';\r\n\r\nconst customMiddleWare = store => next => action => {\r\n  next(action);\r\n  localStorage.setItem(\"initLocalStorageCurrency\", JSON.stringify(store.getState()));\r\n};\r\n\r\nconst initialState = JSON.parse(localStorage.getItem(\"initLocalStorageCurrency\")) || {};\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  applyMiddleware(thunk, customMiddleWare)\r\n);\r\n\r\n// store.subscribe(()=> console.log(store.getState()))\r\n\r\nexport default store;\r\n","import TopMenu from './TopMenu';\r\n\r\nexport default TopMenu;","import React, { useState, memo } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./styles/index.scss\";\r\n\r\nconst TopMenu = memo(({ base, fetchCurrency, currencyList }) => {\r\n  const [selectBase, setSelectBase] = useState(base);\r\n  const handleSelectBase = ({ target: { value } }) => {\r\n    fetchCurrency(value);\r\n    setSelectBase(value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"top-menu\">\r\n      <div className=\"container top-menu__container\">\r\n        <div className=\"top-menu__links-list\">\r\n          <NavLink\r\n            activeClassName=\"top-menu__link--active\"\r\n            className=\"top-menu__link\"\r\n            to=\"/\"\r\n            exact\r\n          >\r\n            Converter\r\n          </NavLink>\r\n          <NavLink\r\n            activeClassName=\"top-menu__link--active\"\r\n            className=\"top-menu__link\"\r\n            to=\"/currencies\"\r\n          >\r\n            Currencies\r\n          </NavLink>\r\n\r\n          <NavLink\r\n            activeClassName=\"top-menu__link--active\"\r\n            className=\"top-menu__link\"\r\n            to=\"/both\"\r\n          >\r\n            Both\r\n          </NavLink>\r\n        </div>\r\n        <div>\r\n          <select\r\n            className=\"control\"\r\n            value={selectBase}\r\n            onChange={handleSelectBase}\r\n          >\r\n            {currencyList.map(currency => (\r\n              <option value={currency} key={currency}>\r\n                {currency}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default TopMenu;\r\n","export const selectConverter = state => state.converter;\r\n\r\nexport const selectConverterIsLoading = state =>\r\n  selectConverter(state).isLoading;\r\n\r\nexport const selectConverterBase = state => selectConverter(state).base;\r\n\r\nexport const selectConverterIsError = state => selectConverter(state).isError;\r\n\r\nexport const selectConverterCurrencyList = state =>\r\n  selectConverter(state).currencyList;\r\n\r\n  export const selectSelections = state => selectConverter(state).selections;","export const selectIsTemplateLoading = state => state.dataTemplate.isLoading;\r\n\r\nexport const selectDataTemplate = state => state.dataTemplate.data;\r\n\r\nexport const selectCurrencyURL = state => selectDataTemplate(state) ? selectDataTemplate(state).currency : null;\r\n","export const resolvePath = (\r\n  filePath,\r\n  prefix = process.env.PUBLIC_URL.concat('/')\r\n) => (filePath.startsWith('http') ? filePath : prefix.concat(filePath));\r\n","import {\r\n  LOAD_CURRENCIES,\r\n  FETCH_CURRENCIES,\r\n  SET_CURRENCIES_LOAD_ERROR,\r\n  SET_BASE_CURRENCY,\r\n  ADD_SELECTED_CURRENCY,\r\n  REMOVE_SELECTED_CURRENCY\r\n} from \"./types\";\r\n\r\nimport { selectCurrencyURL } from \"../dataTemplate/dataTemplateSelectors\";\r\nimport { selectConverterBase } from \"../converter/convertSelectors\";\r\n\r\nimport { resolvePath } from \"../../helpers/index\";\r\n\r\nexport const addToSelected = selected => ({\r\n  type: ADD_SELECTED_CURRENCY,\r\n  selected\r\n});\r\n\r\nexport const removeFromSelected = removed => ({\r\n  type: REMOVE_SELECTED_CURRENCY,\r\n  removed\r\n});\r\n\r\nexport const setLoadCurrencies = isLoading => ({\r\n  type: LOAD_CURRENCIES,\r\n  isLoading\r\n});\r\n\r\nexport const setCurrenciesLoadError = isError => ({\r\n  type: SET_CURRENCIES_LOAD_ERROR,\r\n  isError\r\n});\r\n\r\nexport const setBaseCurrency = base => dispatch => {\r\n  \r\n  dispatch({ type: SET_BASE_CURRENCY, base });\r\n  \r\n};\r\n\r\n\r\n\r\nexport function fetchCurrency (currencyBase)  {\r\n  return (dispatch, state) => {\r\n    const currentState = state();\r\n    const URL = selectCurrencyURL(currentState);\r\n    const base = currencyBase || selectConverterBase(currentState);\r\n    dispatch(setLoadCurrencies(true));\r\n  \r\n    fetch(URL ? resolvePath(URL) : null)\r\n      .then(j => j.json())\r\n      .then(data => {\r\n        const rates =\r\n          base === \"USD\"\r\n            ? data.rates\r\n            : Object.entries(data.rates).reduce(\r\n                (obj, [key, value]) => ({\r\n                  ...obj,\r\n                  [key]: value / data.rates[base]\r\n                }),\r\n                {}\r\n              );\r\n  \r\n        dispatch({ type: FETCH_CURRENCIES, data: rates });\r\n        dispatch(setCurrenciesLoadError(false));\r\n        dispatch(setBaseCurrency(base || data.base));\r\n      })\r\n      .catch(() => dispatch(setCurrenciesLoadError(true)))\r\n      .finally(() => dispatch(setLoadCurrencies(false)));\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TopMenu from \"../components/sections/TopMenu\";\r\n\r\nimport {\r\n  selectConverterBase,\r\n  selectConverterCurrencyList\r\n} from \"../store/converter/convertSelectors\";\r\n\r\nimport { fetchCurrency } from \"../store/converter/convertActions\";\r\n\r\nconst TopMenuContainer = props => {\r\n  return <TopMenu {...props} />;\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  base: selectConverterBase(state),\r\n  currencyList: Object.keys(selectConverterCurrencyList(state))\r\n});\r\n\r\nexport default connect(mapStateToProps, { fetchCurrency })(TopMenuContainer);\r\n","import Template from './Template';\r\n\r\nexport default Template;","import React, { useEffect } from \"react\";\r\nimport TopMenuContainer from \"../../containers/TopMenuContainer\";\r\n\r\nconst Template = ({\r\n  children,\r\n  fetchDataTemplate,\r\n  fetchCurrency,\r\n  isTemplateLoading,\r\n  dataTemplate,\r\n  converterIsLoading,\r\n  converterIsError\r\n}) => {\r\n  const fetchDataEffect = () => {\r\n    fetchDataTemplate();\r\n  };\r\n  const fetchCurrencyEffect = () => {\r\n    !isTemplateLoading && fetchCurrency();\r\n  };\r\n\r\n  useEffect(fetchDataEffect, []);\r\n  useEffect(fetchCurrencyEffect, [isTemplateLoading]);\r\n\r\n  return (\r\n    <>\r\n      {!isTemplateLoading && !converterIsLoading && (\r\n        <>\r\n          {converterIsError ? (\r\n            <button className=\"control\" onClick={fetchCurrency}>Reload Currencies</button>\r\n          ) : (\r\n            <>\r\n              <header>\r\n                <TopMenuContainer />\r\n              </header>\r\n              {children}\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Template;\r\n","import { LOAD_DATA_TEMPLATE, FETCH_DATA_TEMPLATE } from \"./types\";\r\n\r\nimport { resolvePath } from \"../../helpers/index\";\r\n\r\nexport const setLoadDataTemplate = isLoading => ({ type: LOAD_DATA_TEMPLATE, isLoading });\r\n\r\nexport const fetchDataTemplate = () => dispatch => {\r\n  dispatch(setLoadDataTemplate(true));\r\n\r\n  fetch(resolvePath(\"data.json\"))\r\n    .then(j => j.json())\r\n    .then(data => {\r\n      dispatch({ type: FETCH_DATA_TEMPLATE, data });\r\n      dispatch(setLoadDataTemplate(false));\r\n    });\r\n};\r\n\r\n\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Template from \"../components/template\";\r\nimport { fetchDataTemplate } from \"../store/dataTemplate/dataTemplateActions\";\r\nimport {\r\n  selectIsTemplateLoading,\r\n  selectDataTemplate\r\n} from \"../store/dataTemplate/dataTemplateSelectors\";\r\nimport { fetchCurrency } from \"../store/converter/convertActions\";\r\n\r\nimport {\r\n  // selectConverter,\r\n  selectConverterIsLoading,\r\n  // selectConverterBase,\r\n  selectConverterIsError,\r\n  // selectConverterCurrencyList\r\n} from \"../store/converter/convertSelectors\";\r\n\r\nconst TemplateContainer = ({ children, ...props }) => {\r\n \r\n  return <Template {...props}>{children}</Template>;\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  isTemplateLoading: selectIsTemplateLoading(state),\r\n  dataTemplate: selectDataTemplate(state),\r\n  converterIsLoading : selectConverterIsLoading(state),\r\n  converterIsError: selectConverterIsError(state),\r\n});\r\n\r\nexport default connect(mapStateToProps, { fetchCurrency, fetchDataTemplate })(\r\n  TemplateContainer\r\n);\r\n","import React, { memo } from \"react\";\r\nimport \"./styles/index.scss\";\r\n\r\nconst SelectCurrency = memo(({ currencyList, select, setSelect }) => {\r\n  return (\r\n    <select\r\n      className=\"control\"\r\n      value={select}\r\n      onChange={({ target }) => setSelect(target.value)}\r\n    >\r\n      {Object.entries(currencyList).map(([currency]) => (\r\n        <option value={currency} key={currency}>\r\n          {currency}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  );\r\n});\r\n\r\nexport default SelectCurrency;\r\n","import Converter from './Converter';\r\n\r\nexport default Converter;","import React, { useState, useEffect } from \"react\";\r\nimport \"./styles/index.scss\";\r\n\r\nimport SelectCurrency from \"./SelectCurrency\";\r\n\r\nconst Converter = ({ currencyList, converterBase }) => {\r\n  const [selectFrom, setSelectFrom] = useState(converterBase || \"USD\");\r\n  const [selectTo, setSelectTo] = useState(\"USD\");\r\n\r\n  const [from, setFrom] = useState(0);\r\n  const [to, setTo] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setTo(\r\n      from *\r\n        ((currencyList[converterBase] / currencyList[selectFrom]) *\r\n          currencyList[selectTo])\r\n    );\r\n  }, [selectFrom, currencyList, selectTo, converterBase, from, to]);\r\n\r\n  return (\r\n    <div className=\"converter\">\r\n      <div className=\"converter__container container\">\r\n        <h3 className=\"converter__title\">Currency Converter</h3>\r\n        <div className=\"converter__from\">\r\n          Currency I Have:\r\n          <div>\r\n          <input\r\n            className=\"control\"\r\n            type=\"number\"\r\n            onChange={({ target }) => {\r\n              setFrom(target.value);\r\n            }}\r\n            value={from}\r\n          ></input>\r\n          <SelectCurrency\r\n            currencyList={currencyList}\r\n            select={selectFrom}\r\n            setSelect={setSelectFrom}\r\n          />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"converter__to\">\r\n          Currency I Want:\r\n          <div>\r\n          <input className=\"control\" readOnly value={to}></input>\r\n          <SelectCurrency\r\n            currencyList={currencyList}\r\n            select={selectTo}\r\n            setSelect={setSelectTo}\r\n          />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Converter;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Converter from \"../pages/converter\";\r\n\r\nimport {\r\n  selectConverterCurrencyList,\r\n  selectConverterBase\r\n} from \"../store/converter/convertSelectors\";\r\n\r\nconst ConverterContainer = props => {\r\n  return <Converter {...props} />;\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  currencyList: selectConverterCurrencyList(state),\r\n  converterBase: selectConverterBase(state)\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(ConverterContainer);\r\n","import React, { useState, memo, useEffect, useRef } from \"react\";\r\n\r\nconst Currency = memo(\r\n  ({\r\n    currency,\r\n    value,\r\n    base,\r\n    addToSelected,\r\n    removeFromSelected,\r\n    selections,\r\n    className\r\n  }) => {\r\n    const [checked, setChecked] = useState(\r\n      selections.includes(currency) ? true : false\r\n    );\r\n\r\n    const handleChange = () => {\r\n      setChecked(!checked);\r\n    };\r\n\r\n    const hasMount = useRef(false);\r\n\r\n    const checkedEffect = () => {\r\n      if (hasMount.current) {\r\n        checked ? addToSelected(currency) : removeFromSelected(currency);\r\n      } else {\r\n        hasMount.current = true;\r\n      }\r\n    };\r\n\r\n    useEffect(checkedEffect, [checked]);\r\n\r\n    return (\r\n      <div\r\n        className={`currencies__list-elem currencies__list-elem--${className}`}\r\n      >\r\n        <span className=\"currencies__text\">\"{currency}\" is equal to: </span>\r\n        <span className=\"currencies__equal currencies__text\">\r\n          {value} \"{base}\"\r\n        </span>\r\n        <span className=\"currencies__text\">\r\n          Move to selections{\" \"}\r\n          <input type=\"checkbox\" onChange={handleChange} checked={checked} />\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default Currency;\r\n","import CurrenciesList from './CurrenciesList';\r\n\r\nexport default CurrenciesList;","import React from \"react\";\r\nimport \"./styles/index.scss\";\r\n\r\nimport Currency from \"./Currency\";\r\n\r\nconst CurrenciesList = ({\r\n  currenciesList,\r\n  base,\r\n  addToSelected,\r\n  removeFromSelected,\r\n  selections\r\n}) => {\r\n  const renderCurrencies = ([currency, value]) => (\r\n    <Currency\r\n      key={currency}\r\n      {...{\r\n        currency,\r\n        value,\r\n        base,\r\n        addToSelected,\r\n        removeFromSelected,\r\n        selections\r\n      }}\r\n    />\r\n  );\r\n\r\n  const renderSelectedCurrencies = ([currency, value]) => (\r\n    <Currency\r\n      key={currency}\r\n      className=\"selected\"\r\n      {...{\r\n        currency,\r\n        value,\r\n        base,\r\n        addToSelected,\r\n        removeFromSelected,\r\n        selections\r\n      }}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <div className=\"currencies\">\r\n      <div className=\" currencies__container container\">\r\n        <div className=\"currencies__selections\">\r\n          {Object.entries(currenciesList)\r\n            .filter(([key]) => selections.includes(key))\r\n            .map(renderSelectedCurrencies)}\r\n        </div>\r\n\r\n        {Object.entries(currenciesList)\r\n          .filter(([key]) => !selections.includes(key))\r\n          .map(renderCurrencies)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrenciesList;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport CurrenciesList from \"../pages/currenciesList\";\r\nimport {\r\n  selectConverterCurrencyList,\r\n  selectConverterBase,\r\n  selectSelections\r\n} from \"../store/converter/convertSelectors\";\r\n\r\nimport {\r\n  addToSelected,\r\n  removeFromSelected\r\n} from \"../store/converter/convertActions\";\r\n\r\nconst CurrenciesListContainer = props => {\r\n  return <CurrenciesList {...props} />;\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  currenciesList: selectConverterCurrencyList(state),\r\n  base: selectConverterBase(state),\r\n  selections: selectSelections(state)\r\n});\r\n\r\nexport default connect(mapStateToProps, { addToSelected, removeFromSelected })(\r\n  CurrenciesListContainer\r\n);\r\n","import Both from './Both';\r\n\r\nexport default Both;","import React from \"react\";\r\n\r\nimport ConverterContainer from \"../../containers/ConverterContainer\";\r\nimport CurrenciesListContainer from \"../../containers/CurrenciesListContainer\";\r\n\r\nconst Both = () => {\r\n  return (\r\n    <div>\r\n      <ConverterContainer />\r\n      <CurrenciesListContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Both;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store/store\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\nimport TemplateContainer from \"./containers/TemplateContainer\";\nimport ConverterContainer from \"./containers/ConverterContainer\";\nimport CurrenciesListContainer from \"./containers/CurrenciesListContainer\";\nimport Both from \"./pages/both\";\nimport \"./styles/main.scss\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <TemplateContainer>\n        <Switch>\n          <Route path=\"/\" component={ConverterContainer} exact />\n          <Route path={`/currencies`} component={CurrenciesListContainer} />\n          <Route path={`/both`} component={Both} />\n        </Switch>\n      </TemplateContainer>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}